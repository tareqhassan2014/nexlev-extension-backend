/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ChannelStat, // @ts-ignore
  Channel,
} from "@prisma/client";

export class ChannelStatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ChannelStatCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChannelStatCountArgs>
  ): Promise<number> {
    return this.prisma.channelStat.count(args);
  }

  async channelStats<T extends Prisma.ChannelStatFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChannelStatFindManyArgs>
  ): Promise<ChannelStat[]> {
    return this.prisma.channelStat.findMany(args);
  }
  async channelStat<T extends Prisma.ChannelStatFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChannelStatFindUniqueArgs>
  ): Promise<ChannelStat | null> {
    return this.prisma.channelStat.findUnique(args);
  }
  async createChannelStat<T extends Prisma.ChannelStatCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChannelStatCreateArgs>
  ): Promise<ChannelStat> {
    return this.prisma.channelStat.create<T>(args);
  }
  async updateChannelStat<T extends Prisma.ChannelStatUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChannelStatUpdateArgs>
  ): Promise<ChannelStat> {
    return this.prisma.channelStat.update<T>(args);
  }
  async deleteChannelStat<T extends Prisma.ChannelStatDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChannelStatDeleteArgs>
  ): Promise<ChannelStat> {
    return this.prisma.channelStat.delete(args);
  }

  async getChannel(parentId: string): Promise<Channel | null> {
    return this.prisma.channelStat
      .findUnique({
        where: { id: parentId },
      })
      .channel();
  }
}
